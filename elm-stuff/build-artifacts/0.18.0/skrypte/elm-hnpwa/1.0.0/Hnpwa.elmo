var _skrypte$elm_hnpwa$Hnpwa$routeTo = function (page) {
	var p = function () {
		var _p0 = page;
		switch (_p0.ctor) {
			case 'Top':
				return {
					ctor: '::',
					_0: 'top',
					_1: {ctor: '[]'}
				};
			case 'New':
				return {
					ctor: '::',
					_0: 'new',
					_1: {ctor: '[]'}
				};
			case 'Show':
				return {
					ctor: '::',
					_0: 'show',
					_1: {ctor: '[]'}
				};
			case 'Ask':
				return {
					ctor: '::',
					_0: 'ask',
					_1: {ctor: '[]'}
				};
			case 'Jobs':
				return {
					ctor: '::',
					_0: 'jobs',
					_1: {ctor: '[]'}
				};
			case 'SingleItem':
				return {
					ctor: '::',
					_0: 'item',
					_1: {
						ctor: '::',
						_0: _elm_lang$core$Basics$toString(_p0._0),
						_1: {ctor: '[]'}
					}
				};
			default:
				return {ctor: '[]'};
		}
	}();
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'/#/',
		A2(_elm_lang$core$String$join, '/', p));
};
var _skrypte$elm_hnpwa$Hnpwa$timeNow = A2(_elm_lang$core$Task$andThen, _elm_lang$core$Task$succeed, _elm_lang$core$Time$now);
var _skrypte$elm_hnpwa$Hnpwa$maxItemsPerPage = 30;
var _skrypte$elm_hnpwa$Hnpwa$pagination = F3(
	function (page, pagetype, items) {
		var maxStories = function () {
			var _p1 = pagetype;
			switch (_p1.ctor) {
				case 'SingleItem':
					return 1;
				case 'Blank':
					return 0;
				case 'Top':
					return 500;
				case 'New':
					return 500;
				case 'Show':
					return 200;
				case 'Ask':
					return 200;
				default:
					return 200;
			}
		}();
		var previous = _skrypte$elm_hnpwa$Hnpwa$maxItemsPerPage * (page - 1);
		var pages = _elm_lang$core$Native_Utils.eq(previous, 0) ? 0 : _elm_lang$core$Basics$floor(
			maxStories / _elm_lang$core$Basics$toFloat(previous));
		var listAppend = A2(
			_krisajenkins$remotedata$RemoteData$andThen,
			_krisajenkins$remotedata$RemoteData$succeed,
			A3(
				_krisajenkins$remotedata$RemoteData$map2,
				_elm_lang$core$List$append,
				items,
				A2(
					_krisajenkins$remotedata$RemoteData$map,
					_elm_lang$core$List$take(_skrypte$elm_hnpwa$Hnpwa$maxItemsPerPage),
					A2(
						_krisajenkins$remotedata$RemoteData$map,
						_elm_lang$core$List$drop(previous),
						items))));
		return (_elm_lang$core$Native_Utils.cmp(page, pages) < 1) ? listAppend : items;
	});
var _skrypte$elm_hnpwa$Hnpwa$nohtml = A2(
	_elm_lang$html$Html$map,
	_elm_lang$core$Basics$never,
	_elm_lang$html$Html$text(''));
var _skrypte$elm_hnpwa$Hnpwa$story = F2(
	function (feed, _p2) {
		var _p3 = _p2;
		var _p12 = _p3._1;
		var totalcomments = function () {
			var _p4 = _p12.descendants;
			if (_p4.ctor === 'Just') {
				var _p5 = _p4._0;
				return (_elm_lang$core$Native_Utils.cmp(_p5, 2) < 0) ? A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(_p5),
					' comment') : A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(_p5),
					' comments');
			} else {
				return '';
			}
		}();
		var toComments = _elm_lang$core$Native_Utils.eq(
			_elm_lang$core$String$isEmpty(totalcomments),
			true) ? A2(
			_elm_lang$html$Html$span,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('comments'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('id: '),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$a,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$href(
								A2(
									_elm_lang$core$Basics_ops['++'],
									'#/item/',
									_elm_lang$core$Basics$toString(_p12.id))),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								_elm_lang$core$Basics$toString(_p12.id)),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}) : A2(
			_elm_lang$html$Html$span,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('comments'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$a,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$href(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'#/item/',
								_elm_lang$core$Basics$toString(_p12.id))),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(totalcomments),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
		var score = function () {
			var _p6 = _p12.score;
			if (_p6.ctor === 'Just') {
				return A2(
					_elm_lang$html$Html$span,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('score'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							_elm_lang$core$Basics$toString(_p6._0)),
						_1: {ctor: '[]'}
					});
			} else {
				return _skrypte$elm_hnpwa$Hnpwa$nohtml;
			}
		}();
		var title = A2(_elm_lang$core$Maybe$withDefault, '', _p12.title);
		var txt = function () {
			var msg = function () {
				var _p7 = _p12.text;
				if (_p7.ctor === 'Just') {
					return A3(
						_elm_lang$html$Html$node,
						'div',
						{ctor: '[]'},
						_jinjor$elm_html_parser$HtmlParser_Util$toVirtualDom(
							_jinjor$elm_html_parser$HtmlParser$parse(_p7._0)));
				} else {
					return _skrypte$elm_hnpwa$Hnpwa$nohtml;
				}
			}();
			var _p8 = feed.page;
			if (_p8.ctor === 'SingleItem') {
				return msg;
			} else {
				return _skrypte$elm_hnpwa$Hnpwa$nohtml;
			}
		}();
		var domain = function () {
			var _p9 = _p12.url;
			if (_p9.ctor === 'Just') {
				return _elm_lang$core$String$concat(
					A2(
						_elm_lang$core$List$drop,
						2,
						A2(
							_elm_lang$core$List$take,
							3,
							A2(_elm_lang$core$String$split, '/', _p9._0))));
			} else {
				return '';
			}
		}();
		var w = 604800;
		var j = 86400;
		var h = 3600;
		var min = 60;
		var h2url = function () {
			var _p10 = _p12.url;
			if (_p10.ctor === 'Just') {
				return _p10._0;
			} else {
				return '';
			}
		}();
		var heading = function () {
			var _p11 = _elm_lang$core$String$isEmpty(title);
			if (_p11 === true) {
				return _skrypte$elm_hnpwa$Hnpwa$nohtml;
			} else {
				return _elm_lang$core$Native_Utils.eq(
					_elm_lang$core$String$isEmpty(h2url),
					true) ? A2(
					_elm_lang$html$Html$h2,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(title),
						_1: {ctor: '[]'}
					}) : A2(
					_elm_lang$html$Html$h2,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$a,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$target('_blank'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$rel('noopener'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$href(h2url),
										_1: {ctor: '[]'}
									}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(title),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$span,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('source'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(domain),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					});
			}
		}();
		var n = _elm_lang$core$Time$inSeconds(feed.now);
		var sec = _elm_lang$core$Basics$toFloat(_p12.time);
		var old = n - sec;
		var timeLessThan = function (dur) {
			return _elm_lang$core$Basics$toString(
				_elm_lang$core$Basics$ceiling(old / dur));
		};
		var dt = _elm_community$elm_time$Time_DateTime$toISO8601(
			_elm_community$elm_time$Time_DateTime$fromTimestamp(sec * 1000));
		var published = _elm_lang$core$Date$fromTime(sec);
		var humanReadingDateUS = A2(
			_elm_lang$core$String$join,
			'-',
			{
				ctor: '::',
				_0: _elm_lang$core$Basics$toString(
					_elm_lang$core$Date$month(published)),
				_1: {
					ctor: '::',
					_0: _elm_lang$core$Basics$toString(
						_elm_lang$core$Date$day(published)),
					_1: {
						ctor: '::',
						_0: _elm_lang$core$Basics$toString(
							_elm_lang$core$Date$year(published)),
						_1: {ctor: '[]'}
					}
				}
			});
		var pubdate = _elm_lang$core$Native_Utils.eq(old, 1) ? '1 second ago' : ((_elm_lang$core$Native_Utils.cmp(old, min) < 0) ? A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(
				_elm_lang$core$Basics$ceiling(old)),
			' seconds ago') : (_elm_lang$core$Native_Utils.eq(old, min) ? '1 minute ago' : ((_elm_lang$core$Native_Utils.cmp(old, h) < 0) ? A2(
			_elm_lang$core$Basics_ops['++'],
			timeLessThan(min),
			' minutes ago') : (_elm_lang$core$Native_Utils.eq(old, h) ? '1 hour ago' : ((_elm_lang$core$Native_Utils.cmp(old, j) < 0) ? A2(
			_elm_lang$core$Basics_ops['++'],
			timeLessThan(h),
			' hours ago') : (_elm_lang$core$Native_Utils.eq(old, j) ? '1 day ago' : ((_elm_lang$core$Native_Utils.cmp(old, w) < 0) ? A2(
			_elm_lang$core$Basics_ops['++'],
			timeLessThan(j),
			' days ago') : humanReadingDateUS)))))));
		var humanReadingDateEU = A2(
			_elm_lang$core$String$join,
			'-',
			{
				ctor: '::',
				_0: _elm_lang$core$Basics$toString(
					_elm_lang$core$Date$day(published)),
				_1: {
					ctor: '::',
					_0: _elm_lang$core$Basics$toString(
						_elm_lang$core$Date$month(published)),
					_1: {
						ctor: '::',
						_0: _elm_lang$core$Basics$toString(
							_elm_lang$core$Date$year(published)),
						_1: {ctor: '[]'}
					}
				}
			});
		return {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$header,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: heading,
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('metadata'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							A2(_elm_lang$core$Basics_ops['++'], 'by ', _p12.by)),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$time,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$datetime(dt),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(pubdate),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: toComments,
								_1: {
									ctor: '::',
									_0: score,
									_1: {ctor: '[]'}
								}
							}
						}
					}),
				_1: {
					ctor: '::',
					_0: txt,
					_1: {ctor: '[]'}
				}
			}
		};
	});
var _skrypte$elm_hnpwa$Hnpwa$nolist = A2(
	_elm_lang$core$List$map,
	_elm_lang$core$Basics$never,
	{ctor: '[]'});
var _skrypte$elm_hnpwa$Hnpwa$page = function (feed) {
	var posInSet = function (n) {
		return _elm_lang$core$Basics$toString(n + 1);
	};
	var indexed = function (li) {
		return A2(
			_elm_lang$core$List$indexedMap,
			F2(
				function (v0, v1) {
					return {ctor: '_Tuple2', _0: v0, _1: v1};
				}),
			li);
	};
	var setSize = F2(
		function (li, item) {
			if (_elm_lang$core$Native_Utils.eq(item.type_, 'comment')) {
				var _p13 = item.parent;
				if (_p13.ctor === 'Just') {
					return _elm_lang$core$Basics$toString(
						_elm_lang$core$List$length(
							A2(
								_elm_lang$core$Maybe$withDefault,
								{ctor: '[]'},
								A2(_elm_lang$core$Dict$get, _p13._0, feed.comments))));
				} else {
					return '-1';
				}
			} else {
				return _elm_lang$core$Basics$toString(
					_elm_lang$core$List$length(li));
			}
		});
	var msg = function (_p14) {
		var _p15 = _p14;
		var _p18 = _p15._1;
		var _p17 = _p15._0;
		if (_elm_lang$core$Native_Utils.eq(_p18.type_, 'comment')) {
			var _p16 = _p18.parent;
			if (_p16.ctor === 'Just') {
				return _elm_lang$core$Native_Utils.eq(
					A2(_elm_lang$core$Dict$member, _p16._0, feed.comments),
					true) ? _skrypte$elm_hnpwa$Hnpwa$nolist : A2(
					_skrypte$elm_hnpwa$Hnpwa$story,
					feed,
					{ctor: '_Tuple2', _0: _p17, _1: _p18});
			} else {
				return A2(
					_skrypte$elm_hnpwa$Hnpwa$story,
					feed,
					{ctor: '_Tuple2', _0: _p17, _1: _p18});
			}
		} else {
			return A2(
				_skrypte$elm_hnpwa$Hnpwa$story,
				feed,
				{ctor: '_Tuple2', _0: _p17, _1: _p18});
		}
	};
	var kids = function (item) {
		return _elm_lang$core$Native_Utils.eq(item.kids, _elm_lang$core$Maybe$Nothing) ? _elm_lang$core$Maybe$Nothing : A2(_elm_lang$core$Dict$get, item.id, feed.comments);
	};
	var parent = F2(
		function (byId, fromList) {
			return _elm_lang$core$List$head(
				A2(
					_elm_lang$core$List$filter,
					function (i) {
						return _elm_lang$core$Native_Utils.eq(i.id, byId);
					},
					fromList));
		});
	var pushComment = F3(
		function (items, _p19, parentHtml) {
			var _p20 = _p19;
			var _p26 = _p20._1;
			var _p25 = _p20._0;
			var i = A2(
				_elm_lang$core$Maybe$withDefault,
				_p26,
				_elm_lang$core$List$head(
					A2(
						_elm_lang$core$List$drop,
						_p25,
						A2(
							_elm_lang$core$Maybe$withDefault,
							_skrypte$elm_hnpwa$Hnpwa$nolist,
							A2(_elm_lang$core$Dict$get, _p26.id, feed.comments)))));
			var c = {
				parent: A2(parent, _p26.id, items),
				item: i,
				index: 0 + _p25,
				id: i.id,
				kids: kids(i)
			};
			var str = A2(
				_skrypte$elm_hnpwa$Hnpwa$story,
				feed,
				{ctor: '_Tuple2', _0: c.index, _1: c.item});
			var content = function () {
				var _p21 = feed.page;
				if (_p21.ctor === 'SingleItem') {
					return A2(
						_elm_lang$core$List$map,
						_elm_lang$core$Tuple$mapFirst(
							function (_p22) {
								return _elm_lang$core$Basics$toString(c.index);
							}),
						A2(
							_elm_lang$core$List$indexedMap,
							F2(
								function (v0, v1) {
									return {ctor: '_Tuple2', _0: v0, _1: v1};
								}),
							A2(_elm_lang$core$List$append, parentHtml, str)));
				} else {
					return A2(
						_elm_lang$core$List$map,
						_elm_lang$core$Tuple$mapFirst(
							function (_p23) {
								return _elm_lang$core$Basics$toString(c.index);
							}),
						A2(
							_elm_lang$core$List$indexedMap,
							F2(
								function (v0, v1) {
									return {ctor: '_Tuple2', _0: v0, _1: v1};
								}),
							parentHtml));
				}
			}();
			var nodes = function () {
				var _p24 = c.kids;
				if (_p24.ctor === 'Nothing') {
					return content;
				} else {
					return _elm_lang$core$Array$toList(
						A2(
							_elm_lang$core$Array$push,
							A2(
								knode,
								_p24._0,
								{ctor: '_Tuple2', _0: c.index, _1: c.item}),
							_elm_lang$core$Array$fromList(content)));
				}
			}();
			return nodes;
		});
	var knode = F2(
		function (items, _p27) {
			var _p28 = _p27;
			var _p29 = _p28._0;
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Basics$toString(_p29),
				_1: A2(
					htmlContent,
					items,
					{ctor: '_Tuple2', _0: _p29, _1: _p28._1})
			};
		});
	var htmlContent = F2(
		function (items, _p30) {
			var _p31 = _p30;
			var _p33 = _p31._1;
			var _p32 = _p31._0;
			return A2(
				_elm_lang$html$Html_Lazy$lazy,
				A2(
					_elm_lang$html$Html_Keyed$node,
					'article',
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$id(
							A2(
								_elm_lang$core$Basics_ops['++'],
								_p33.type_,
								A2(
									_elm_lang$core$Basics_ops['++'],
									'-',
									_elm_lang$core$Basics$toString(_p33.id)))),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class(_p33.type_),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$tabindex(0),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html_Attributes$attribute,
										'aria-setsize',
										A2(setSize, items, _p33)),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html_Attributes$attribute,
											'aria-posinset',
											posInSet(_p32)),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}),
				A3(
					pushComment,
					items,
					{ctor: '_Tuple2', _0: _p32, _1: _p33},
					msg(
						{ctor: '_Tuple2', _0: _p32, _1: _p33})));
		});
	var articles = function (li) {
		return A2(
			_elm_lang$html$Html_Lazy$lazy,
			A2(
				_elm_lang$html$Html_Keyed$node,
				'main',
				{
					ctor: '::',
					_0: A2(_elm_lang$html$Html_Attributes$attribute, 'aria-busy', 'false'),
					_1: {
						ctor: '::',
						_0: A2(_elm_lang$html$Html_Attributes$attribute, 'role', 'feed'),
						_1: {ctor: '[]'}
					}
				}),
			A2(
				_elm_lang$core$List$map,
				knode(li),
				indexed(li)));
	};
	var _p34 = feed.data;
	switch (_p34.ctor) {
		case 'Loading':
			return A2(
				_elm_lang$html$Html$main_,
				{
					ctor: '::',
					_0: A2(_elm_lang$html$Html_Attributes$attribute, 'aria-busy', 'true'),
					_1: {
						ctor: '::',
						_0: A2(_elm_lang$html$Html_Attributes$attribute, 'role', 'feed'),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$id('loading'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$object,
								{
									ctor: '::',
									_0: A2(_elm_lang$html$Html_Attributes$attribute, 'data', '/svg/puff.svg'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$type_('image/svg+xml'),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Loading...'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				});
		case 'Success':
			return articles(
				A2(
					_elm_lang$core$List$filter,
					function (i) {
						return !_elm_lang$core$Native_Utils.eq(i.type_, 'comment');
					},
					_p34._0));
		case 'Failure':
			return A2(
				_elm_lang$html$Html$p,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$id('err'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Cannot load the page.'),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h4,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('warning'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Error'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('warning'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										_elm_lang$core$Basics$toString(_p34._0)),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				});
		default:
			return A2(
				_elm_lang$html$Html$figure,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$img,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$src('/svg/hnpwa.svg'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$alt('HN PWA logo'),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				});
	}
};
var _skrypte$elm_hnpwa$Hnpwa$laz = function (y) {
	return _elm_lang$core$Json_Decode$lazy(
		function (_p35) {
			return y;
		});
};
var _skrypte$elm_hnpwa$Hnpwa$versioning = 'v0/';
var _skrypte$elm_hnpwa$Hnpwa$uri = 'https://hacker-news.firebaseio.com/';
var _skrypte$elm_hnpwa$Hnpwa$api = function (page) {
	var url = A2(_elm_lang$core$Basics_ops['++'], _skrypte$elm_hnpwa$Hnpwa$uri, _skrypte$elm_hnpwa$Hnpwa$versioning);
	var _p36 = page;
	switch (_p36.ctor) {
		case 'Blank':
			return _elm_lang$core$Maybe$Nothing;
		case 'Top':
			return _elm_lang$core$Maybe$Just(
				A2(_elm_lang$core$Basics_ops['++'], url, 'topstories.json'));
		case 'New':
			return _elm_lang$core$Maybe$Just(
				A2(_elm_lang$core$Basics_ops['++'], url, 'newstories.json'));
		case 'Show':
			return _elm_lang$core$Maybe$Just(
				A2(_elm_lang$core$Basics_ops['++'], url, 'showstories.json'));
		case 'Ask':
			return _elm_lang$core$Maybe$Just(
				A2(_elm_lang$core$Basics_ops['++'], url, 'askstories.json'));
		case 'Jobs':
			return _elm_lang$core$Maybe$Just(
				A2(_elm_lang$core$Basics_ops['++'], url, 'jobstories.json'));
		default:
			return _elm_lang$core$Maybe$Just(
				A2(
					_elm_lang$core$Basics_ops['++'],
					url,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'item/',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(_p36._0),
							'.json'))));
	}
};
var _skrypte$elm_hnpwa$Hnpwa$url = function (page) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		'',
		_skrypte$elm_hnpwa$Hnpwa$api(page));
};
var _skrypte$elm_hnpwa$Hnpwa$itemurl = function (id) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_skrypte$elm_hnpwa$Hnpwa$uri,
		A2(
			_elm_lang$core$Basics_ops['++'],
			_skrypte$elm_hnpwa$Hnpwa$versioning,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'item/',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(id),
					'.json'))));
};
var _skrypte$elm_hnpwa$Hnpwa$Feed = F5(
	function (a, b, c, d, e) {
		return {data: a, page: b, now: c, comments: d, responses: e};
	});
var _skrypte$elm_hnpwa$Hnpwa$Item = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return {id: a, by: b, time: c, type_: d, text: e, url: f, score: g, title: h, descendants: i, parent: j, kids: k};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _skrypte$elm_hnpwa$Hnpwa$item = A4(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
	'kids',
	A2(
		_elm_lang$core$Json_Decode$map,
		_elm_lang$core$Maybe$Just,
		_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$int)),
	_elm_lang$core$Maybe$Nothing,
	A4(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
		'parent',
		A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$int),
		_elm_lang$core$Maybe$Nothing,
		A4(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
			'descendants',
			A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$int),
			_elm_lang$core$Maybe$Nothing,
			A4(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
				'title',
				A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string),
				_elm_lang$core$Maybe$Nothing,
				A4(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
					'score',
					A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$int),
					_elm_lang$core$Maybe$Nothing,
					A4(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
						'url',
						A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string),
						_elm_lang$core$Maybe$Nothing,
						A4(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
							'text',
							A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string),
							_elm_lang$core$Maybe$Nothing,
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
								'type',
								_elm_lang$core$Json_Decode$string,
								A3(
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
									'time',
									_elm_lang$core$Json_Decode$int,
									A3(
										_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
										'by',
										_elm_lang$core$Json_Decode$string,
										A3(
											_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
											'id',
											_elm_lang$core$Json_Decode$int,
											_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_skrypte$elm_hnpwa$Hnpwa$Item))))))))))));
var _skrypte$elm_hnpwa$Hnpwa$Comment = F5(
	function (a, b, c, d, e) {
		return {parent: a, item: b, index: c, id: d, kids: e};
	});
var _skrypte$elm_hnpwa$Hnpwa$SingleItem = function (a) {
	return {ctor: 'SingleItem', _0: a};
};
var _skrypte$elm_hnpwa$Hnpwa$Jobs = {ctor: 'Jobs'};
var _skrypte$elm_hnpwa$Hnpwa$Ask = {ctor: 'Ask'};
var _skrypte$elm_hnpwa$Hnpwa$Show = {ctor: 'Show'};
var _skrypte$elm_hnpwa$Hnpwa$New = {ctor: 'New'};
var _skrypte$elm_hnpwa$Hnpwa$Top = {ctor: 'Top'};
var _skrypte$elm_hnpwa$Hnpwa$route = _evancz$url_parser$UrlParser$oneOf(
	{
		ctor: '::',
		_0: A2(
			_evancz$url_parser$UrlParser$map,
			_skrypte$elm_hnpwa$Hnpwa$Top,
			_evancz$url_parser$UrlParser$s('top')),
		_1: {
			ctor: '::',
			_0: A2(
				_evancz$url_parser$UrlParser$map,
				_skrypte$elm_hnpwa$Hnpwa$New,
				_evancz$url_parser$UrlParser$s('new')),
			_1: {
				ctor: '::',
				_0: A2(
					_evancz$url_parser$UrlParser$map,
					_skrypte$elm_hnpwa$Hnpwa$Show,
					_evancz$url_parser$UrlParser$s('show')),
				_1: {
					ctor: '::',
					_0: A2(
						_evancz$url_parser$UrlParser$map,
						_skrypte$elm_hnpwa$Hnpwa$Ask,
						_evancz$url_parser$UrlParser$s('ask')),
					_1: {
						ctor: '::',
						_0: A2(
							_evancz$url_parser$UrlParser$map,
							_skrypte$elm_hnpwa$Hnpwa$Jobs,
							_evancz$url_parser$UrlParser$s('jobs')),
						_1: {
							ctor: '::',
							_0: A2(
								_evancz$url_parser$UrlParser$map,
								_skrypte$elm_hnpwa$Hnpwa$SingleItem,
								A2(
									_evancz$url_parser$UrlParser_ops['</>'],
									_evancz$url_parser$UrlParser$s('item'),
									_evancz$url_parser$UrlParser$int)),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		}
	});
var _skrypte$elm_hnpwa$Hnpwa$pathto = function (loc) {
	return _elm_lang$core$String$isEmpty(loc.hash) ? _elm_lang$core$Maybe$Just(_skrypte$elm_hnpwa$Hnpwa$Top) : A2(_evancz$url_parser$UrlParser$parseHash, _skrypte$elm_hnpwa$Hnpwa$route, loc);
};
var _skrypte$elm_hnpwa$Hnpwa$Blank = {ctor: 'Blank'};
var _skrypte$elm_hnpwa$Hnpwa$From = function (a) {
	return {ctor: 'From', _0: a};
};
var _skrypte$elm_hnpwa$Hnpwa$pathparser = function (loc) {
	return _skrypte$elm_hnpwa$Hnpwa$From(
		A2(_evancz$url_parser$UrlParser$parseHash, _skrypte$elm_hnpwa$Hnpwa$route, loc));
};
var _skrypte$elm_hnpwa$Hnpwa$ChainComments = function (a) {
	return {ctor: 'ChainComments', _0: a};
};
var _skrypte$elm_hnpwa$Hnpwa$getKidsOfSingle = function (i) {
	var t = _skrypte$elm_hnpwa$Hnpwa$timeNow;
	var maybeSuccess = function (listComments) {
		return _krisajenkins$remotedata$RemoteData$toMaybe(listComments);
	};
	var getItem = function (id) {
		return A2(
			_ohanhi$remotedata_http$RemoteData_Http$getTask,
			_skrypte$elm_hnpwa$Hnpwa$itemurl(id),
			_skrypte$elm_hnpwa$Hnpwa$laz(_skrypte$elm_hnpwa$Hnpwa$item));
	};
	var seq = function (uence) {
		return A2(
			_elm_lang$core$Task$map,
			_krisajenkins$remotedata$RemoteData$succeed,
			A2(
				_elm_lang$core$Task$map,
				_elm_lang$core$List$filterMap(maybeSuccess),
				A2(
					_elm_lang$core$Task$andThen,
					_elm_lang$core$Task$sequence,
					_elm_lang$core$Task$succeed(
						A2(_elm_lang$core$List$map, getItem, uence)))));
	};
	var kids = function () {
		var _p37 = i.kids;
		if (_p37.ctor === 'Just') {
			return _p37._0;
		} else {
			return {ctor: '[]'};
		}
	}();
	var id = _elm_lang$core$Task$succeed(i.id);
	var performDiscuss = function (task) {
		return A2(
			_elm_lang$core$Task$perform,
			_skrypte$elm_hnpwa$Hnpwa$ChainComments,
			A4(
				_elm_lang$core$Task$map3,
				F3(
					function (v0, v1, v2) {
						return {ctor: '_Tuple3', _0: v0, _1: v1, _2: v2};
					}),
				t,
				id,
				task));
	};
	return _elm_lang$core$List$isEmpty(kids) ? _elm_lang$core$Platform_Cmd$none : performDiscuss(
		seq(kids));
};
var _skrypte$elm_hnpwa$Hnpwa$getKidsOfSeveral = function (items) {
	var _p38 = items;
	if (_p38.ctor === 'Success') {
		return _elm_lang$core$Platform_Cmd$batch(
			A2(_elm_lang$core$List$map, _skrypte$elm_hnpwa$Hnpwa$getKidsOfSingle, _p38._0));
	} else {
		return _elm_lang$core$Platform_Cmd$none;
	}
};
var _skrypte$elm_hnpwa$Hnpwa$ChainItems = function (a) {
	return {ctor: 'ChainItems', _0: a};
};
var _skrypte$elm_hnpwa$Hnpwa$enlist = function (tasks) {
	var t = _skrypte$elm_hnpwa$Hnpwa$timeNow;
	var maybeSuccess = function (listWDI) {
		return _krisajenkins$remotedata$RemoteData$toMaybe(listWDI);
	};
	var chained = A3(
		_elm_lang$core$Task$map2,
		F2(
			function (v0, v1) {
				return {ctor: '_Tuple2', _0: v0, _1: v1};
			}),
		t,
		A2(
			_elm_lang$core$Task$map,
			_krisajenkins$remotedata$RemoteData$succeed,
			A2(
				_elm_lang$core$Task$map,
				_elm_lang$core$List$filterMap(maybeSuccess),
				tasks)));
	return A2(_elm_lang$core$Task$perform, _skrypte$elm_hnpwa$Hnpwa$ChainItems, chained);
};
var _skrypte$elm_hnpwa$Hnpwa$getItems = function (ids) {
	var _p39 = ids;
	if (_p39.ctor === 'Success') {
		var getitem = function (id) {
			return A2(
				_ohanhi$remotedata_http$RemoteData_Http$getTask,
				_skrypte$elm_hnpwa$Hnpwa$itemurl(id),
				_skrypte$elm_hnpwa$Hnpwa$laz(_skrypte$elm_hnpwa$Hnpwa$item));
		};
		return _skrypte$elm_hnpwa$Hnpwa$enlist(
			A2(
				_elm_lang$core$Task$andThen,
				_elm_lang$core$Task$sequence,
				_elm_lang$core$Task$succeed(
					A2(
						_elm_lang$core$List$map,
						getitem,
						A2(_elm_lang$core$List$take, _skrypte$elm_hnpwa$Hnpwa$maxItemsPerPage, _p39._0)))));
	} else {
		return _elm_lang$core$Platform_Cmd$none;
	}
};
var _skrypte$elm_hnpwa$Hnpwa$FetchSingleItem = function (a) {
	return {ctor: 'FetchSingleItem', _0: a};
};
var _skrypte$elm_hnpwa$Hnpwa$getSingleItem = function (id) {
	var t = _skrypte$elm_hnpwa$Hnpwa$timeNow;
	var i = A2(
		_ohanhi$remotedata_http$RemoteData_Http$getTask,
		_skrypte$elm_hnpwa$Hnpwa$itemurl(id),
		_skrypte$elm_hnpwa$Hnpwa$item);
	var chained = A3(
		_elm_lang$core$Task$map2,
		F2(
			function (v0, v1) {
				return {ctor: '_Tuple2', _0: v0, _1: v1};
			}),
		t,
		A2(
			_elm_lang$core$Task$map,
			_krisajenkins$remotedata$RemoteData$map(_elm_lang$core$List$singleton),
			i));
	return A2(_elm_lang$core$Task$perform, _skrypte$elm_hnpwa$Hnpwa$FetchSingleItem, chained);
};
var _skrypte$elm_hnpwa$Hnpwa$FetchStories = function (a) {
	return {ctor: 'FetchStories', _0: a};
};
var _skrypte$elm_hnpwa$Hnpwa$loadpage = function (page) {
	var decoder = _elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$int);
	var endpoint = _skrypte$elm_hnpwa$Hnpwa$url(page);
	var stories = A2(_ohanhi$remotedata_http$RemoteData_Http$getTask, endpoint, decoder);
	var data = _skrypte$elm_hnpwa$Hnpwa$FetchStories;
	return A2(_elm_lang$core$Task$perform, data, stories);
};
var _skrypte$elm_hnpwa$Hnpwa$getPage = function (page) {
	var _p40 = page;
	switch (_p40.ctor) {
		case 'Blank':
			return _elm_lang$core$Platform_Cmd$none;
		case 'Top':
			return _skrypte$elm_hnpwa$Hnpwa$loadpage(_skrypte$elm_hnpwa$Hnpwa$Top);
		case 'New':
			return _skrypte$elm_hnpwa$Hnpwa$loadpage(_skrypte$elm_hnpwa$Hnpwa$New);
		case 'Show':
			return _skrypte$elm_hnpwa$Hnpwa$loadpage(_skrypte$elm_hnpwa$Hnpwa$Show);
		case 'Ask':
			return _skrypte$elm_hnpwa$Hnpwa$loadpage(_skrypte$elm_hnpwa$Hnpwa$Ask);
		case 'Jobs':
			return _skrypte$elm_hnpwa$Hnpwa$loadpage(_skrypte$elm_hnpwa$Hnpwa$Jobs);
		default:
			return _skrypte$elm_hnpwa$Hnpwa$getSingleItem(_p40._0);
	}
};
var _skrypte$elm_hnpwa$Hnpwa$update = F2(
	function (data, feed) {
		var db = F2(
			function (parentId, comments) {
				var _p41 = comments;
				if (_p41.ctor === 'Success') {
					return A3(_elm_lang$core$Dict$insert, parentId, _p41._0, feed.comments);
				} else {
					return feed.comments;
				}
			});
		var discuss = function (comments) {
			return A3(_krisajenkins$remotedata$RemoteData$map2, _elm_lang$core$List$append, feed.data, comments);
		};
		var _p42 = data;
		switch (_p42.ctor) {
			case 'FetchStories':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						feed,
						{data: _krisajenkins$remotedata$RemoteData$Loading}),
					_1: _skrypte$elm_hnpwa$Hnpwa$getItems(_p42._0)
				};
			case 'FetchSingleItem':
				var _p43 = _p42._0._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						feed,
						{data: _p43, now: _p42._0._0}),
					_1: _skrypte$elm_hnpwa$Hnpwa$getKidsOfSeveral(_p43)
				};
			case 'ChainItems':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						feed,
						{data: _p42._0._1, now: _p42._0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ChainComments':
				var _p44 = _p42._0._2;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						feed,
						{
							data: discuss(_p44),
							comments: A2(db, _p42._0._1, _p44),
							now: _p42._0._0
						}),
					_1: _skrypte$elm_hnpwa$Hnpwa$getKidsOfSeveral(_p44)
				};
			default:
				if (_p42._0.ctor === 'Just') {
					var _p45 = _p42._0._0;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							feed,
							{page: _p45, comments: _elm_lang$core$Dict$empty}),
						_1: _skrypte$elm_hnpwa$Hnpwa$getPage(_p45)
					};
				} else {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						feed,
						{
							ctor: '::',
							_0: _elm_lang$core$Platform_Cmd$none,
							_1: {ctor: '[]'}
						});
				}
		}
	});
var _skrypte$elm_hnpwa$Hnpwa$Responses = function (a) {
	return {ctor: 'Responses', _0: a};
};
var _skrypte$elm_hnpwa$Hnpwa$initialFeed = {
	data: _krisajenkins$remotedata$RemoteData$NotAsked,
	page: _skrypte$elm_hnpwa$Hnpwa$Blank,
	now: 0,
	comments: _elm_lang$core$Dict$empty,
	responses: _skrypte$elm_hnpwa$Hnpwa$Responses(
		{ctor: '[]'})
};
var _skrypte$elm_hnpwa$Hnpwa$init = function (loc) {
	var _p46 = _skrypte$elm_hnpwa$Hnpwa$pathto(loc);
	if (_p46.ctor === 'Just') {
		switch (_p46._0.ctor) {
			case 'Blank':
				return {
					ctor: '_Tuple2',
					_0: _skrypte$elm_hnpwa$Hnpwa$initialFeed,
					_1: _skrypte$elm_hnpwa$Hnpwa$getPage(_skrypte$elm_hnpwa$Hnpwa$Top)
				};
			case 'Top':
				return {
					ctor: '_Tuple2',
					_0: _skrypte$elm_hnpwa$Hnpwa$initialFeed,
					_1: _skrypte$elm_hnpwa$Hnpwa$getPage(_skrypte$elm_hnpwa$Hnpwa$Top)
				};
			case 'New':
				return {
					ctor: '_Tuple2',
					_0: _skrypte$elm_hnpwa$Hnpwa$initialFeed,
					_1: _skrypte$elm_hnpwa$Hnpwa$getPage(_skrypte$elm_hnpwa$Hnpwa$New)
				};
			case 'Show':
				return {
					ctor: '_Tuple2',
					_0: _skrypte$elm_hnpwa$Hnpwa$initialFeed,
					_1: _skrypte$elm_hnpwa$Hnpwa$getPage(_skrypte$elm_hnpwa$Hnpwa$Show)
				};
			case 'Ask':
				return {
					ctor: '_Tuple2',
					_0: _skrypte$elm_hnpwa$Hnpwa$initialFeed,
					_1: _skrypte$elm_hnpwa$Hnpwa$getPage(_skrypte$elm_hnpwa$Hnpwa$Ask)
				};
			case 'Jobs':
				return {
					ctor: '_Tuple2',
					_0: _skrypte$elm_hnpwa$Hnpwa$initialFeed,
					_1: _skrypte$elm_hnpwa$Hnpwa$getPage(_skrypte$elm_hnpwa$Hnpwa$Jobs)
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: _skrypte$elm_hnpwa$Hnpwa$initialFeed,
					_1: _skrypte$elm_hnpwa$Hnpwa$getPage(
						_skrypte$elm_hnpwa$Hnpwa$SingleItem(_p46._0._0))
				};
		}
	} else {
		return {ctor: '_Tuple2', _0: _skrypte$elm_hnpwa$Hnpwa$initialFeed, _1: _elm_lang$core$Platform_Cmd$none};
	}
};
var _skrypte$elm_hnpwa$Hnpwa$main = A2(
	_elm_lang$navigation$Navigation$program,
	_skrypte$elm_hnpwa$Hnpwa$pathparser,
	{
		init: _skrypte$elm_hnpwa$Hnpwa$init,
		update: _skrypte$elm_hnpwa$Hnpwa$update,
		view: _skrypte$elm_hnpwa$Hnpwa$page,
		subscriptions: function (_p47) {
			return _elm_lang$core$Platform_Sub$none;
		}
	})();
var _skrypte$elm_hnpwa$Hnpwa$List = function (a) {
	return {ctor: 'List', _0: a};
};
