var _skrypte$elm_hnpwa$Feed$story = F2(
	function (feed, item) {
		var pubdate = _elm_lang$core$Basics$toString(item.time);
		var totalcomments = _elm_lang$core$Basics$toString(item.descendants);
		var score = _elm_lang$core$Basics$toString(item.score);
		var domain = _elm_lang$core$String$concat(
			A2(
				_elm_lang$core$List$map,
				_elm_lang$core$Basics$toString,
				A2(
					_elm_lang$core$List$drop,
					1,
					A2(
						_elm_lang$core$List$take,
						2,
						A2(_elm_lang$core$String$split, '/', item.url)))));
		return A2(
			_elm_lang$html$Html$article,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$header,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h2,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$target('_blank'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$rel('noopener'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$href(item.url),
												_1: {ctor: '[]'}
											}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(item.title),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$span,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(domain),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$span,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(item.by),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$span,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(score),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$time,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(pubdate),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$span,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(totalcomments),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _skrypte$elm_hnpwa$Feed$keyedItem = F2(
	function (feed, item) {
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Basics$toString(item.id),
			_1: A2(_skrypte$elm_hnpwa$Feed$story, feed, item)
		};
	});
var _skrypte$elm_hnpwa$Feed$contentinfo = A2(
	_elm_lang$html$Html$footer,
	{
		ctor: '::',
		_0: A2(_elm_lang$html$Html_Attributes$attribute, 'role', 'contentinfo'),
		_1: {ctor: '[]'}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$p,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$span,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Elm '),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$a,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$href('https://hnpwa.com/'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$rel('noopener'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$target('_blank'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$title('visit HNPWA'),
										_1: {ctor: '[]'}
									}
								}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('HNPWA'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$span,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(', a better Elm learning experience inspired from '),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$a,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$href('https://github.com/tastejs'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$rel('noopener'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$target('_blank'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$title('other awesome apps projects'),
												_1: {ctor: '[]'}
											}
										}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('TasteJS'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$span,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('. Elm HNPWA source code on '),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$a,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$href('https://github.com/skrypte/elm-hn-pwa'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$rel('noopener'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$target('_blank'),
													_1: {ctor: '[]'}
												}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('skingrapher\'s github repo'),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$span,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('. Code and design licenced under MIT. Inspired from several sources. Credits&nbsp;:'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$ul,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$li,
														{ctor: '[]'},
														{
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$a,
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html_Attributes$href('https://github.com/foxdonut/adventures-reactive-web-dev/tree/elm-010-todolist-feature/client-elm'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$rel('noopener'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$target('_blank'),
																			_1: {ctor: '[]'}
																		}
																	}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text('client elm'),
																	_1: {ctor: '[]'}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$span,
																	{ctor: '[]'},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text(' by Fred Daoud, for structuring the code'),
																		_1: {ctor: '[]'}
																	}),
																_1: {ctor: '[]'}
															}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$li,
															{ctor: '[]'},
															{
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$a,
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html_Attributes$href('https://github.com/rtfeldman/elm-spa-example'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$rel('noopener'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$target('_blank'),
																				_1: {ctor: '[]'}
																			}
																		}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('elm spa example'),
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$span,
																		{ctor: '[]'},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text(' by Richard Feldman'),
																			_1: {ctor: '[]'}
																		}),
																	_1: {ctor: '[]'}
																}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$li,
																{ctor: '[]'},
																{
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$a,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Attributes$href('https://github.com/bkbooth/Elmstagram'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$rel('noopener'),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$target('_blank'),
																					_1: {ctor: '[]'}
																				}
																			}
																		},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('elmstagram'),
																			_1: {ctor: '[]'}
																		}),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$span,
																			{ctor: '[]'},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text(' by Ben Booth'),
																				_1: {ctor: '[]'}
																			}),
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$li,
																	{ctor: '[]'},
																	{
																		ctor: '::',
																		_0: A2(
																			_elm_lang$html$Html$a,
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html_Attributes$href('http://blog.jenkster.com/2016/06/how-elm-slays-a-ui-antipattern.html'),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$html$Html_Attributes$rel('noopener'),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$html$Html_Attributes$target('_blank'),
																						_1: {ctor: '[]'}
																					}
																				}
																			},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('RemoteData'),
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_elm_lang$html$Html$span,
																				{ctor: '[]'},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text(' by Kris Jenkins'),
																					_1: {ctor: '[]'}
																				}),
																			_1: {ctor: '[]'}
																		}
																	}),
																_1: {ctor: '[]'}
															}
														}
													}
												}),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			}),
		_1: {ctor: '[]'}
	});
var _skrypte$elm_hnpwa$Feed$banner = A2(
	_elm_lang$html$Html$header,
	{
		ctor: '::',
		_0: A2(_elm_lang$html$Html_Attributes$attribute, 'role', 'banner'),
		_1: {ctor: '[]'}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$img,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$src('/elm.svg'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$alt('built with Elm'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h1,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Elm HN PWA'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$nav,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$ul,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$li,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$a,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$href('/top'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('top'),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$li,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$a,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$href('/new'),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('new'),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$li,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$a,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$href('/show'),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('show'),
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$li,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$a,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$href('/ask'),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text('ask'),
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$li,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$a,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$href('/jobs'),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('jobs'),
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		}
	});
var _skrypte$elm_hnpwa$Feed$page = function (feed) {
	var d = feed.data;
	var _p0 = d;
	switch (_p0.ctor) {
		case 'Loading':
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _skrypte$elm_hnpwa$Feed$banner,
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('loading...'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _skrypte$elm_hnpwa$Feed$contentinfo,
							_1: {ctor: '[]'}
						}
					}
				});
		case 'Success':
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _skrypte$elm_hnpwa$Feed$banner,
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$main_,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A3(
									_elm_lang$html$Html_Keyed$node,
									'section',
									{ctor: '[]'},
									A2(
										_elm_lang$core$List$map,
										_skrypte$elm_hnpwa$Feed$keyedItem(feed),
										_p0._0)),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _skrypte$elm_hnpwa$Feed$contentinfo,
							_1: {ctor: '[]'}
						}
					}
				});
		case 'Failure':
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _skrypte$elm_hnpwa$Feed$banner,
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('cannot get the page'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _skrypte$elm_hnpwa$Feed$contentinfo,
							_1: {ctor: '[]'}
						}
					}
				});
		default:
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _skrypte$elm_hnpwa$Feed$banner,
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Start discovering some entries from HN'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _skrypte$elm_hnpwa$Feed$contentinfo,
							_1: {ctor: '[]'}
						}
					}
				});
	}
};
var _skrypte$elm_hnpwa$Feed$versioning = 'v0/';
var _skrypte$elm_hnpwa$Feed$uri = 'https://hacker-news.firebaseio.com/';
var _skrypte$elm_hnpwa$Feed$api = function (page) {
	var url = A2(_elm_lang$core$Basics_ops['++'], _skrypte$elm_hnpwa$Feed$uri, _skrypte$elm_hnpwa$Feed$versioning);
	var _p1 = page;
	switch (_p1.ctor) {
		case 'Blank':
			return _elm_lang$core$Maybe$Nothing;
		case 'Top':
			return _elm_lang$core$Maybe$Just(
				A2(_elm_lang$core$Basics_ops['++'], url, 'topstories.json'));
		case 'New':
			return _elm_lang$core$Maybe$Just(
				A2(_elm_lang$core$Basics_ops['++'], url, 'newstories.json'));
		case 'Show':
			return _elm_lang$core$Maybe$Just(
				A2(_elm_lang$core$Basics_ops['++'], url, 'showstories.json'));
		case 'Ask':
			return _elm_lang$core$Maybe$Just(
				A2(_elm_lang$core$Basics_ops['++'], url, 'askstories.json'));
		case 'Jobs':
			return _elm_lang$core$Maybe$Just(
				A2(_elm_lang$core$Basics_ops['++'], url, 'jobstories.json'));
		case 'Job':
			return _elm_lang$core$Maybe$Just(
				A2(
					_elm_lang$core$Basics_ops['++'],
					url,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'item/',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(_p1._0),
							'.json'))));
		default:
			return _elm_lang$core$Maybe$Just(
				A2(
					_elm_lang$core$Basics_ops['++'],
					url,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'item/',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(_p1._0),
							'.json'))));
	}
};
var _skrypte$elm_hnpwa$Feed$Feed = F2(
	function (a, b) {
		return {data: a, page: b};
	});
var _skrypte$elm_hnpwa$Feed$Item = F9(
	function (a, b, c, d, e, f, g, h, i) {
		return {id: a, type_: b, by: c, time: d, text: e, url: f, score: g, title: h, descendants: i};
	});
var _skrypte$elm_hnpwa$Feed$item = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'descendants',
	_elm_lang$core$Json_Decode$int,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'title',
		_elm_lang$core$Json_Decode$string,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'score',
			_elm_lang$core$Json_Decode$int,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'url',
				_elm_lang$core$Json_Decode$string,
				A4(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
					'text',
					A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string),
					_elm_lang$core$Maybe$Nothing,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'time',
						_elm_lang$core$Json_Decode$int,
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'by',
							_elm_lang$core$Json_Decode$string,
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
								'type',
								_elm_lang$core$Json_Decode$string,
								A3(
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
									'id',
									_elm_lang$core$Json_Decode$int,
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_skrypte$elm_hnpwa$Feed$Item))))))))));
var _skrypte$elm_hnpwa$Feed$Comment = function (a) {
	return {ctor: 'Comment', _0: a};
};
var _skrypte$elm_hnpwa$Feed$Job = function (a) {
	return {ctor: 'Job', _0: a};
};
var _skrypte$elm_hnpwa$Feed$Jobs = {ctor: 'Jobs'};
var _skrypte$elm_hnpwa$Feed$Ask = {ctor: 'Ask'};
var _skrypte$elm_hnpwa$Feed$Show = {ctor: 'Show'};
var _skrypte$elm_hnpwa$Feed$New = {ctor: 'New'};
var _skrypte$elm_hnpwa$Feed$Top = {ctor: 'Top'};
var _skrypte$elm_hnpwa$Feed$route = _evancz$url_parser$UrlParser$oneOf(
	{
		ctor: '::',
		_0: A2(
			_evancz$url_parser$UrlParser$map,
			_skrypte$elm_hnpwa$Feed$Top,
			_evancz$url_parser$UrlParser$s('top')),
		_1: {
			ctor: '::',
			_0: A2(
				_evancz$url_parser$UrlParser$map,
				_skrypte$elm_hnpwa$Feed$New,
				_evancz$url_parser$UrlParser$s('new')),
			_1: {
				ctor: '::',
				_0: A2(
					_evancz$url_parser$UrlParser$map,
					_skrypte$elm_hnpwa$Feed$Show,
					_evancz$url_parser$UrlParser$s('show')),
				_1: {
					ctor: '::',
					_0: A2(
						_evancz$url_parser$UrlParser$map,
						_skrypte$elm_hnpwa$Feed$Ask,
						_evancz$url_parser$UrlParser$s('ask')),
					_1: {
						ctor: '::',
						_0: A2(
							_evancz$url_parser$UrlParser$map,
							_skrypte$elm_hnpwa$Feed$Jobs,
							_evancz$url_parser$UrlParser$s('jobs')),
						_1: {
							ctor: '::',
							_0: A2(
								_evancz$url_parser$UrlParser$map,
								_skrypte$elm_hnpwa$Feed$Job,
								A2(
									_evancz$url_parser$UrlParser_ops['</>'],
									_evancz$url_parser$UrlParser$s('Job'),
									_evancz$url_parser$UrlParser$int)),
							_1: {
								ctor: '::',
								_0: A2(
									_evancz$url_parser$UrlParser$map,
									_skrypte$elm_hnpwa$Feed$Comment,
									A2(
										_evancz$url_parser$UrlParser_ops['</>'],
										_evancz$url_parser$UrlParser$s('comment'),
										_evancz$url_parser$UrlParser$int)),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		}
	});
var _skrypte$elm_hnpwa$Feed$pathto = function (loc) {
	return _elm_lang$core$String$isEmpty(loc.pathname) ? _elm_lang$core$Maybe$Just(_skrypte$elm_hnpwa$Feed$Top) : A2(_evancz$url_parser$UrlParser$parsePath, _skrypte$elm_hnpwa$Feed$route, loc);
};
var _skrypte$elm_hnpwa$Feed$Blank = {ctor: 'Blank'};
var _skrypte$elm_hnpwa$Feed$initialFeed = {data: _krisajenkins$remotedata$RemoteData$NotAsked, page: _skrypte$elm_hnpwa$Feed$Blank};
var _skrypte$elm_hnpwa$Feed$Goto = function (a) {
	return {ctor: 'Goto', _0: a};
};
var _skrypte$elm_hnpwa$Feed$pathparser = function (loc) {
	return _skrypte$elm_hnpwa$Feed$Goto(
		A2(_evancz$url_parser$UrlParser$parsePath, _skrypte$elm_hnpwa$Feed$route, loc));
};
var _skrypte$elm_hnpwa$Feed$GetSingleItem = F2(
	function (a, b) {
		return {ctor: 'GetSingleItem', _0: a, _1: b};
	});
var _skrypte$elm_hnpwa$Feed$GetStories = {ctor: 'GetStories'};
var _skrypte$elm_hnpwa$Feed$FetchStories = function (a) {
	return {ctor: 'FetchStories', _0: a};
};
var _skrypte$elm_hnpwa$Feed$FetchItems = function (a) {
	return {ctor: 'FetchItems', _0: a};
};
var _skrypte$elm_hnpwa$Feed$getPage = function (page) {
	var li = _elm_lang$core$Json_Decode$list(_skrypte$elm_hnpwa$Feed$item);
	var url = A2(
		_elm_lang$core$Maybe$withDefault,
		'',
		_skrypte$elm_hnpwa$Feed$api(page));
	var _p2 = page;
	switch (_p2.ctor) {
		case 'Blank':
			return _elm_lang$core$Platform_Cmd$none;
		case 'Top':
			return A3(_ohanhi$remotedata_http$RemoteData_Http$get, url, _skrypte$elm_hnpwa$Feed$FetchItems, li);
		case 'New':
			return A3(_ohanhi$remotedata_http$RemoteData_Http$get, url, _skrypte$elm_hnpwa$Feed$FetchItems, li);
		case 'Show':
			return A3(_ohanhi$remotedata_http$RemoteData_Http$get, url, _skrypte$elm_hnpwa$Feed$FetchItems, li);
		case 'Ask':
			return A3(_ohanhi$remotedata_http$RemoteData_Http$get, url, _skrypte$elm_hnpwa$Feed$FetchItems, li);
		case 'Jobs':
			return A3(_ohanhi$remotedata_http$RemoteData_Http$get, url, _skrypte$elm_hnpwa$Feed$FetchItems, li);
		case 'Job':
			return A3(
				_ohanhi$remotedata_http$RemoteData_Http$get,
				url,
				_skrypte$elm_hnpwa$Feed$GetSingleItem(_p2._0),
				_skrypte$elm_hnpwa$Feed$item);
		default:
			return A3(
				_ohanhi$remotedata_http$RemoteData_Http$get,
				url,
				_skrypte$elm_hnpwa$Feed$GetSingleItem(_p2._0),
				_skrypte$elm_hnpwa$Feed$item);
	}
};
var _skrypte$elm_hnpwa$Feed$init = function (loc) {
	var _p3 = _skrypte$elm_hnpwa$Feed$pathto(loc);
	if (_p3.ctor === 'Just') {
		switch (_p3._0.ctor) {
			case 'Blank':
				return {ctor: '_Tuple2', _0: _skrypte$elm_hnpwa$Feed$initialFeed, _1: _elm_lang$core$Platform_Cmd$none};
			case 'Top':
				return {
					ctor: '_Tuple2',
					_0: _skrypte$elm_hnpwa$Feed$initialFeed,
					_1: _skrypte$elm_hnpwa$Feed$getPage(_skrypte$elm_hnpwa$Feed$Top)
				};
			case 'New':
				return {
					ctor: '_Tuple2',
					_0: _skrypte$elm_hnpwa$Feed$initialFeed,
					_1: _skrypte$elm_hnpwa$Feed$getPage(_skrypte$elm_hnpwa$Feed$New)
				};
			case 'Show':
				return {
					ctor: '_Tuple2',
					_0: _skrypte$elm_hnpwa$Feed$initialFeed,
					_1: _skrypte$elm_hnpwa$Feed$getPage(_skrypte$elm_hnpwa$Feed$Show)
				};
			case 'Ask':
				return {
					ctor: '_Tuple2',
					_0: _skrypte$elm_hnpwa$Feed$initialFeed,
					_1: _skrypte$elm_hnpwa$Feed$getPage(_skrypte$elm_hnpwa$Feed$Ask)
				};
			case 'Jobs':
				return {
					ctor: '_Tuple2',
					_0: _skrypte$elm_hnpwa$Feed$initialFeed,
					_1: _skrypte$elm_hnpwa$Feed$getPage(_skrypte$elm_hnpwa$Feed$Jobs)
				};
			case 'Job':
				return {
					ctor: '_Tuple2',
					_0: _skrypte$elm_hnpwa$Feed$initialFeed,
					_1: _skrypte$elm_hnpwa$Feed$getPage(
						_skrypte$elm_hnpwa$Feed$Job(_p3._0._0))
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: _skrypte$elm_hnpwa$Feed$initialFeed,
					_1: _skrypte$elm_hnpwa$Feed$getPage(
						_skrypte$elm_hnpwa$Feed$Comment(_p3._0._0))
				};
		}
	} else {
		return {ctor: '_Tuple2', _0: _skrypte$elm_hnpwa$Feed$initialFeed, _1: _elm_lang$core$Platform_Cmd$none};
	}
};
var _skrypte$elm_hnpwa$Feed$update = F2(
	function (data, feed) {
		var itemurl = function (id) {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_skrypte$elm_hnpwa$Feed$uri,
				A2(
					_elm_lang$core$Basics_ops['++'],
					_skrypte$elm_hnpwa$Feed$versioning,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'item/',
						A2(_elm_lang$core$Basics_ops['++'], id, '.json'))));
		};
		var url = A2(
			_elm_lang$core$Maybe$withDefault,
			'',
			_skrypte$elm_hnpwa$Feed$api(feed.page));
		var max = 20;
		var ids = A2(
			_elm_lang$core$Json_Decode$map,
			_elm_lang$core$List$take(max),
			_elm_lang$core$Json_Decode$list(
				_elm_lang$core$Json_Decode$lazy(
					function (_p4) {
						return _elm_lang$core$Json_Decode$int;
					})));
		var _p5 = data;
		switch (_p5.ctor) {
			case 'FetchItems':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						feed,
						{data: _p5._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'FetchStories':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						feed,
						{data: _krisajenkins$remotedata$RemoteData$Loading}),
					_1: A3(
						_ohanhi$remotedata_http$RemoteData_Http$get,
						url,
						_skrypte$elm_hnpwa$Feed$FetchItems,
						_elm_lang$core$Json_Decode$list(_skrypte$elm_hnpwa$Feed$item))
				};
			case 'GetStories':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						feed,
						{data: _krisajenkins$remotedata$RemoteData$Loading}),
					_1: A3(_ohanhi$remotedata_http$RemoteData_Http$get, url, _skrypte$elm_hnpwa$Feed$FetchStories, ids)
				};
			case 'GetSingleItem':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						feed,
						{data: _krisajenkins$remotedata$RemoteData$Loading}),
					_1: A3(
						_ohanhi$remotedata_http$RemoteData_Http$get,
						itemurl(
							_elm_lang$core$Basics$toString(_p5._0)),
						_skrypte$elm_hnpwa$Feed$FetchItems,
						_elm_lang$core$Json_Decode$list(_skrypte$elm_hnpwa$Feed$item))
				};
			default:
				if (_p5._0.ctor === 'Just') {
					var _p6 = _p5._0._0;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							feed,
							{data: _krisajenkins$remotedata$RemoteData$Loading, page: _p6}),
						_1: _skrypte$elm_hnpwa$Feed$getPage(_p6)
					};
				} else {
					return {ctor: '_Tuple2', _0: feed, _1: _elm_lang$core$Platform_Cmd$none};
				}
		}
	});
var _skrypte$elm_hnpwa$Feed$main = A2(
	_elm_lang$navigation$Navigation$program,
	_skrypte$elm_hnpwa$Feed$pathparser,
	{
		init: _skrypte$elm_hnpwa$Feed$init,
		update: _skrypte$elm_hnpwa$Feed$update,
		view: _skrypte$elm_hnpwa$Feed$page,
		subscriptions: function (_p7) {
			return _elm_lang$core$Platform_Sub$none;
		}
	})();
