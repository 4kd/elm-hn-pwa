//@charset "UTF-8"
$breakpoints: ("sm": 320px, "md": 768px, "xl": 1024px) !default
$media-expressions: ("screen": "screen", "print": "print", "handheld": "handheld", "landscape": "(orientation: landscape)", "portrait": "(orientation: portrait)", "retina2x": "(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)", "retina3x": "(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)") !default
$unit-intervals: ("px": 1, "em": 0.01, "rem": 0.1, "": 0) !default
$im-media-support: true !default
$im-no-media-breakpoint: "xl" !default
@function im-log($message)
  @if feature-exists("at-error")
    @error $message
  @else
    @warn $message

    $_: noop()

  @return $message

=log($message)
  @if im-log($message)

@function im-intercepts-static-breakpoint($conditions...)
  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint)

  @if not $no-media-breakpoint-value
    @if im-log("`#{$im-no-media-breakpoint}` is not a valid breakpoint.")

  @each $condition in $conditions
    @if not map-has-key($media-expressions, $condition)
      $operator: get-expression-operator($condition)
      $prefix: get-expression-prefix($operator)
      $value: get-expression-value($condition, $operator)

      @if $prefix == "max" and $value <= $no-media-breakpoint-value or $prefix == "min" and $value > $no-media-breakpoint-value
        @return false
    @else if not index($im-no-media-expressions, $condition)
      @return false

  @return true

@function get-expression-operator($expression)
  @each $operator in ">=", ">", "<=", "<", "≥", "≤"
    @if str-index($expression, $operator)
      @return $operator

  $_: im-log("No operator found in `#{$expression}`.")

@function get-expression-dimension($expression, $operator)
  $operator-index: str-index($expression, $operator)
  $parsed-dimension: str-slice($expression, 0, $operator-index - 1)
  $dimension: "width"

  @if str-length($parsed-dimension) > 0
    $dimension: $parsed-dimension

  @return $dimension

@function get-expression-prefix($operator)
  @return if(index(("<", "<=", "≤"), $operator), "max", "min")

@function get-expression-value($expression, $operator)
  $operator-index: str-index($expression, $operator)
  $value: str-slice($expression, $operator-index + str-length($operator))

  @if map-has-key($breakpoints, $value)
    $value: map-get($breakpoints, $value)
  @else
    $value: to-number($value)

  $interval: map-get($unit-intervals, unit($value))

  @if not $interval
    $_: im-log("Unknown unit `#{unit($value)}`.")

  @if $operator == ">"
    $value: $value + $interval
  @else if $operator == "<"
    $value: $value - $interval

  @return $value

@function parse-expression($expression)

  @if map-has-key($media-expressions, $expression)
    @return map-get($media-expressions, $expression)

  $operator: get-expression-operator($expression)
  $dimension: get-expression-dimension($expression, $operator)
  $prefix: get-expression-prefix($operator)
  $value: get-expression-value($expression, $operator)

  @return "(#{$prefix}-#{$dimension}: #{$value})"

@function slice($list, $start: 1, $end: length($list))
  @if length($list) < 1 or $start > $end
    @return ()

  $result: ()

  @for $i from $start through $end
    $result: append($result, nth($list, $i))

  @return $result

@function to-number($value)
  @if type-of($value) == "number"
    @return $value
  @else if type-of($value) != "string"
    $_: im-log("Value for `to-number` should be a number or a string.")

  $first-character: str-slice($value, 1, 1)
  $result: 0
  $digits: 0
  $minus: $first-character == "-"
  $numbers: ("0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9)

  // Remove +/- sign if present at first character

  @if $first-character == "+" or $first-character == "-"
    $value: str-slice($value, 2)

  @for $i from 1 through str-length($value)
    $character: str-slice($value, $i, $i)

    @if not (index(map-keys($numbers), $character) or $character == ".")
      @return to-length(if($minus, -$result, $result), str-slice($value, $i))

    @if $character == "."
      $digits: 1
    @else if $digits == 0
      $result: $result * 10 + map-get($numbers, $character)
    @else
      $digits: $digits * 10
      $result: $result + map-get($numbers, $character) / $digits

  @return if($minus, -$result, $result)

@function to-length($value, $unit)
  $units: ("px": 1px, "cm": 1cm, "mm": 1mm, "%": 1%, "ch": 1ch, "pc": 1pc, "in": 1in, "em": 1em, "rem": 1rem, "pt": 1pt, "ex": 1ex, "vw": 1vw, "vh": 1vh, "vmin": 1vmin, "vmax": 1vmax)

  @if not index(map-keys($units), $unit)
    $_: im-log("Invalid unit `#{$unit}`.")

  @return $value * map-get($units, $unit)

=media-context($tweakpoints: (), $tweak-media-expressions: ())
  $global-breakpoints: $breakpoints
  $global-media-expressions: $media-expressions

  $breakpoints: map-merge($breakpoints, $tweakpoints) !global
  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global

  @content

  $breakpoints: $global-breakpoints !global
  $media-expressions: $global-media-expressions !global

=media($conditions...)
  @if $im-media-support and length($conditions) == 0 or not $im-media-support and im-intercepts-static-breakpoint($conditions...)
    @content
  @else if $im-media-support and length($conditions) > 0
    @media #{unquote(parse-expression(nth($conditions, 1)))}
      // Recursive call
      +media(slice($conditions, 2)...)
        @content

// colors
$black: hsla(23, 13%, 13%, 1)
$darkergray: hsla(327, 6%, 32%, 1)
$darkgray: hsla(0, 2%, 74%, 1)
$gray: hsla(0, 0%, 93%, 1)
$shadow: rgba(23,13%,13%,.75)
$lightteal: hsla(147, 100%, 86%, 1)
$teal: hsla(151, 57%, 22%, 1)
$lightgreen: hsla(99, 28%, 90%, 1)
$purple: hsla(323, 63%, 34%, 1)
$marine: hsla(180, 57%, 9%, 1)
$darkcyan: hsla(180, 57%, 22%, 1)
$darkercyan: hsla(180, 58%, 19%, 1)
// default colors
$color: $darkergray 
$bg: $gray 
// link colors
$avisited: hsla(26, 6%, 25%, 1)
$a: $teal
$ahover: $purple
$aactive: $purple

$tabcolor: $lightteal
$footerbg: $lightgreen
$nav--bg: $darkercyan
$nav__item--bghover: $darkercyan

$header--bg: $darkcyan
$header--color: white

$nav__item--padding: 2vw 

$warning: $purple
html
  font-size: 0.85rem 
  background: $bg

body
  font-family: sans-serif
  color: $color
  margin: 0
  box-sizing: border-box

  > div
    height: 100vh
a
  color: $a 
  text-decoration: none
  &:hover
    color: $ahover

ul
  padding: 0

nav > ul, #credits
  margin: 0
  display: flex
  align-items: center

body > header
  background: $header--bg
  color: $header--color
  margin: 0 
  padding-top: 1vh
  box-sizing: border-box
  box-shadow: 0px 1px 2px 0 $shadow
  
.icons
  display: block
  width: 36px
  height: 36px
  margin: 0 1vw 1vh
  &:first-child
    float: left

  &:last-child
    float: right

  @include media("<=md")
    width: 24px
    height: 24px

h1
  width: 25vw 
  font-size: 2.3vmax
  display: inline
    
  @include media(">sm","<=md")
    font-size: 4vmax
    
  @include media("<=sm")
    font-size: 5vmax

h2
  font-size: medium
  font-weight: 400
  margin: 0

nav
  background: $darkercyan 
  clear: both

  @include media(">sm","<=md")
    margin-top: 1vh

  @include media("<=sm")
    font-size: .875rem 

.nav__item
  width: 10vw
  box-sizing: border-box
  list-style-type: none
  height: 30px
  text-align: center
  display: flex
  justify-content: center
  align-items: center
  position: relative

  &:hover
    font-weight: 700
    background: $nav__item--bghover
    
  @include media("<=sm")
    width: 20vw

.nav__link
  padding-top: 5px
  position: absolute
  top: 0
  bottom: 0
  left: 0
  right: 0
  color: $tabcolor
  border-bottom: none
  &:hover
    color: $tabcolor
    border-bottom: 2px solid $tabcolor 

#elmembed
  padding-top: 2vh
  box-sizing: border-box

article
  margin: 0 5px 
  padding: 5px 0
  border-bottom: 1px dotted $darkgray

.source
  padding-left: 5px 
  font-size: small
  font-weight: 400

  &::before
    content: "\2139"
    padding-right: 5px

.metadata
  font-weight: 700
  font-size: small
  margin: 0

time
  padding-left: 5px

.comments,.score
  padding-left: 5px

  &::before
    content: "\7c"
    padding-right: 5px

.score
  &::after
    content: "\2605"
    padding-left: 5px

.loading
  height: 100%
  width: 100vw

  > div
    width: 100px
    height: 100px
    position: absolute
    top: calc(50vh - 50px) 
    left: calc(50vw - 50px) 
    overflow: visible

#err
  font-size: large
  text-align: center

figure
  display: block
  margin: 0
  position: absolute
  top: calc(50vh - 80px) 
  left: calc(50vw - 80px) 
  overflow: visible
  width: 160px
  //margin: 25% auto
  //margin: calc(50vh - 80px) auto

.active
  color: white
  border-bottom: 2px solid $tabcolor 
  background: $header--bg

h4
  font-weight: 700

.warning
  color: $warning
  text-align: left

.comment
  border-bottom: none
  border-left-width: 2px
  border-left-style: solid

.comment,.job,.story,.ask
  padding-left: 5px

.comment:nth-of-type(odd)
  border-left-color: $lightgreen 

.comment:nth-of-type(even)
  border-left-color: $lightteal 

.comment--container
  padding-left: 5px

.feed
  margin-left: 10px
  margin-bottom: 10px

#status
  font-weight: 700
  text-transform: uppercase

.offline
  display: block
  visibility: visible

.online
  display: none
  visibility: hidden

